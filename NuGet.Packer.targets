<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Packing Settings -->
  <PropertyGroup>
    <!-- Enables building a NuGet package from a project -->
    <BuildNuGetPackage Condition=" '$(BuildNuGetPackage)' == '' ">false</BuildNuGetPackage>

    <!-- Get Patch Version -->
    <!-- Use TFS BuildNumber if available -->
    <PatchVersion Condition=" '$(PatchVersion)' == '' And '$(TF_BUILD_BUILDNUMBER)' != ''">$(TF_BUILD_BUILDNUMBER.Substring($([MSBuild]::Add($(TF_BUILD_BUILDDEFINITIONNAME.Length), 1))).Replace(".", ""))</PatchVersion>
    <!-- Default to current UTC date, hour, minute if we couldn't get it anywhere else -->
    <PatchVersion Condition=" '$(PatchVersion)' == ''">$([System.DateTime]::UtcNow.ToString(`yyMMddHHmm`))</PatchVersion>

    <!-- Construct the package version -->
    <PackageVersion Condition=" '$(PackageVersion)' == ''">$(MajorVersion).$(MinorVersion).$(PatchVersion)</PackageVersion>

    <!-- Append a PreReleaseVersion to the package version if it exists -->
    <PackageVersion Condition=" '$(PreReleaseVersion)' != ''">$(PackageVersion)-$(PreReleaseVersion)</PackageVersion>

    <!-- Determines whether a symbols package (.symbols.nupkg) is produced -->
    <BuildSymbolsPackage Condition=" '$(BuildSymbolsPackage)' == ''">true</BuildSymbolsPackage>
    
    <!-- Use [ProjectName].nuspec as NuSpecFile if it exists -->
    <DefaultNuSpecFile>$(ProjectDir)$(ProjectName).nuspec</DefaultNuSpecFile>
    <NuSpecFile Condition=" '$(NuSpecFile)' == '' And Exists('$(DefaultNuSpecFile)')">$(DefaultNuSpecFile)</NuSpecFile>

  </PropertyGroup>

  <!-- Publishing Settings -->
  <PropertyGroup>

    <!-- Enables publishing a NuGet package -->
    <PublishNuGetPackage Condition=" '$(PublishNuGetPackage)' == '' ">false</PublishNuGetPackage>
    
    <!-- The API Key to use when publishing NuGet packages -->
    <NuGetApiKey Condition=" '$(NuGetApiKey)' == '' "></NuGetApiKey>
    
    <!-- The NuGet package repository that packages will be published to -->
    <NuGetPublishSource Condition=" '$(NuGetPublishSource)' == '' "></NuGetPublishSource>

  </PropertyGroup>

  <PropertyGroup>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\..\</SolutionDir>

    <!-- NuGet command -->
    <NugetPackageRoot Condition=" '$(NugetPackageRoot)'=='' ">$(MSBuildThisFileDirectory)..\..\</NugetPackageRoot>
    <NuGetToolsPath Condition=" '$(NuGetToolsPath)'=='' ">$(NugetPackageRoot)NuGet.CommandLine.4.5.1\tools</NuGetToolsPath>
    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)\NuGet.exe</NuGetExePath>
    <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">&quot;$(NuGetExePath)&quot;</NuGetCommand>
    <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 &quot;$(NuGetExePath)&quot;</NuGetCommand>

    <PackageOutputDir Condition="$(PackageOutputDir) == ''">$(OutDir.Trim('\\'))</PackageOutputDir>
    <PackageBasePath Condition="$(PackageBasePath) == ''">$(OutDir.Trim('\\'))</PackageBasePath>

    <!-- Build Command -->
    <BuildSymbolsSwitch Condition=" '$(BuildSymbolsPackage)' == 'true' ">-symbols</BuildSymbolsSwitch>
    <NonInteractiveSwitch Condition=" '$(VisualStudioVersion)' != '' AND '$(OS)' == 'Windows_NT' ">-NonInteractive</NonInteractiveSwitch>

    <BuildCommand Condition=" $(NuSpecFile) == '' ">$(NuGetCommand) pack &quot;$(ProjectPath)&quot; -Properties &quot;Configuration=$(Configuration);Platform=$(Platform);TargetPath=$(OutDir)$(AssemblyName)$(TargetExt)&quot; $(NonInteractiveSwitch) -OutputDirectory &quot;$(PackageOutputDir)&quot; $(BuildSymbolsSwitch) -Version $(PackageVersion)</BuildCommand>
    <BuildCommand Condition=" $(NuSpecFile) != '' ">$(NuGetCommand) pack &quot;$(NuSpecFile)&quot; $(NonInteractiveSwitch) -BasePath &quot;$(PackageBasePath)&quot; -OutputDirectory &quot;$(PackageOutputDir)&quot; $(BuildSymbolsSwitch) -Version $(PackageVersion)</BuildCommand>

    <!-- Publish Command -->
    <PublishApiKeySwitch Condition=" '$(NuGetApiKey)' != '' ">-ApiKey "$(NuGetApiKey)"</PublishApiKeySwitch>
    <PublishSourceSwitch Condition=" '$(NuGetPublishSource)' != '' ">-Source "$(NuGetPublishSource)"</PublishSourceSwitch>
    <NuGetPackagePath Condition=" '$(NuGetPackagePath)' == '' ">$(PackageOutputDir)\$(ProjectName).$(PackageVersion).nupkg</NuGetPackagePath>

    <PublishCommand>$(NuGetCommand) push $(PublishApiKeySwitch) $(PublishSourceSwitch) &quot;$(NuGetPackagePath)&quot;</PublishCommand>

    <!-- Make the build depend on restore packages -->
    <BuildDependsOn Condition="$(BuildNuGetPackage) == 'true'">
      $(BuildDependsOn);
      BuildNuGetPackage;
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="BuildNuGetPackage" DependsOnTargets="CheckPrerequisites">
    <Exec Command="$(BuildCommand)" Condition=" '$(OS)' != 'Windows_NT' "/>
    <Exec Command="$(BuildCommand)" Condition=" '$(OS)' == 'Windows_NT' " LogStandardErrorAsError="true"/>
    
    <Exec Command="$(PublishCommand)" Condition=" '$(PublishNuGetPackage)' == 'true' And '$(OS)' != 'Windows_NT' "/>
    <Exec Command="$(PublishCommand)" Condition=" '$(PublishNuGetPackage)' == 'true' And '$(OS)' == 'Windows_NT' " LogStandardErrorAsError="true"/>
  </Target>

  <Target Name="CheckPrerequisites">
    <!-- Raise an error if we're unable to locate nuget.exe  -->
    <Error Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')" Text="Unable to locate '$(NuGetExePath)'"/>
  </Target>
</Project>
